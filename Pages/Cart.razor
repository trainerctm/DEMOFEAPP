@page "/cart"
@using DemoFEApp.AuthServices
@inject HttpClient Http
@inject AuthService AuthService

<h3>My Cart</h3>

@if (cartItems == null)
{
    <p>Loading...</p>
}
else if (cartItems.Count == 0)
{
    <p>Your cart is empty.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartItems)
            {
                <tr>
                    <td>@item.ProductId</td>
                    <td>@item.Quantity</td>
                    <td>
                        <button class="btn btn-sm btn-warning"
                                @onclick="() => UpdateQuantity(item.Id, item.Quantity + 1)">+</button>
                        <button class="btn btn-sm btn-warning"
                                @onclick="() => UpdateQuantity(item.Id, item.Quantity - 1)">-</button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => RemoveItem(item.Id)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="Checkout">Checkout</button>
}

@code {
    private List<CartItemDto>? cartItems;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.SetAuthHeaderAsync();
        cartItems = await Http.GetFromJsonAsync<List<CartItemDto>>("api/cart");
    }

    private async Task UpdateQuantity(int cartItemId, int newQty)
    {
        if (newQty < 1) return; // skip if zero or negative
        await AuthService.SetAuthHeaderAsync();
        var response = await Http.PutAsJsonAsync($"api/cart/{cartItemId}", newQty);
        if (response.IsSuccessStatusCode)
        {
            // reload cart
            cartItems = await Http.GetFromJsonAsync<List<CartItemDto>>("api/cart");
        }
    }

    private async Task RemoveItem(int cartItemId)
    {
        await AuthService.SetAuthHeaderAsync();
        var response = await Http.DeleteAsync($"api/cart/{cartItemId}");
        if (response.IsSuccessStatusCode)
        {
            cartItems = await Http.GetFromJsonAsync<List<CartItemDto>>("api/cart");
        }
    }

    private async Task Checkout()
    {
        await AuthService.SetAuthHeaderAsync();
        var response = await Http.PostAsync("api/orders/checkout", null);
        if (response.IsSuccessStatusCode)
        {
            // Clear cart in UI
            cartItems = new List<CartItemDto>();
            // Possibly navigate to /orders to see new order
        }
    }

    public class CartItemDto
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public string UserId { get; set; } = string.Empty;
    }
}
