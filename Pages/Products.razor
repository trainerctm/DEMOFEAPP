@page "/products"
@using DemoFEApp.Services
@using DemoFEApp.Models
@using DemoFEApp.AuthServices
@inject ProductService ProductService
@inject NavigationManager Navigation
@inject AuthService AuthService

<h3>Products</h3>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Image</th>
            <th>Name</th>
            <th>Price</th>
            <th>Stock</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in ProductList2)
        {
            <tr>
                <td>@product.Id</td>
                <td>
                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <img src="@product.ImageUrl" style="width:50px;" alt="Thumbnail" />
                    }
                </td>
                <td>
                   
                    <a href="/product-details/@product.Id">@product.Name</a>
                </td>
                <td>@product.Price</td>
                <td>@product.Stock</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => NavigateToUpdate(product.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Product> ProductList2 = new();

    protected override async Task OnInitializedAsync()
    {

        //await AuthService.SetAuthHeaderAsync();
        ProductList2 = await ProductService.GetProductsAsync();
    }

    private void NavigateToUpdate(int id)
    {
        Navigation.NavigateTo($"/update-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        ProductList2 = await ProductService.GetProductsAsync();
    }
}
